stream = [
    0x50, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x46, 
    0x50, 0x50, 0x42, 0x45, 0x46, 0x4D, 0x4D, 0x4F, 0x50, 0x50, 
    0x50, 0x50, 0x50, 0x50, 0x50, 0x4F, 0x50, 0x50, 0x50, 0x50, 
    0x50, 0x50, 0x50, 0x50, 0x4F, 0x53, 0x4D, 0x4D, 0x4D, 0x46, 
    0x50, 0x50, 0x42, 0x45, 0x46, 0x4D, 0x4D, 0x4D, 0x4D, 0x4F, 
    0x4D, 0x4D, 0x53, 0x4D, 0x46, 0x50, 0x50, 0x50, 0x50, 0x42, 
    0x45, 0x46, 0x4F, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x46, 
    0x50, 0x42, 0x45, 0x46, 0x4D, 0x4F, 0x4D, 0x4F, 0x53, 0x4D, 
    0x4D, 0x46, 0x50, 0x42, 0x45, 0x46, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x4F, 0x53, 0x4D, 0x4D, 0x4D, 0x46, 0x50, 0x50, 0x50, 0x50, 
    0x42, 0x45, 0x46, 0x50, 0x50, 0x4F, 0x53, 0x50, 0x50, 0x46, 
    0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x42, 0x45, 0x46, 
    0x4F, 0x50, 0x53, 0x4D, 0x46, 0x50, 0x50, 0x50, 0x42, 0x45, 
    0x46, 0x50, 0x4F, 0x50, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 0x46, 
    0x50, 0x50, 0x50, 0x42, 0x45, 0x46, 0x4F, 0x50, 0x53, 0x4D, 
    0x4D, 0x46, 0x50, 0x50, 0x50, 0x42, 0x45, 0x46, 0x50, 0x4F, 
    0x53, 0x4D, 0x46, 0x50, 0x50, 0x50, 0x42, 0x45, 0x46, 0x4D, 
    0x4D, 0x4F, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x46, 0x50, 0x42, 0x45, 0x46, 0x4F, 0x53, 0x4D, 0x4D, 0x4D, 
    0x46, 0x50, 0x50, 0x42, 0x45, 0x46, 0x4D, 0x4D, 0x4F, 0x4D, 
    0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x4D, 0x4F, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 0x46, 0x50, 0x50, 
    0x50, 0x42, 0x45, 0x46, 0x4D, 0x4F, 0x4D, 0x53, 0x50, 0x50, 
    0x50, 0x50, 0x46, 0x4D, 0x4D, 0x4D, 0x42, 0x45, 0x46, 0x4F, 
    0x50, 0x53, 0x4D, 0x4D, 0x46, 0x50, 0x42, 0x45, 0x46, 0x50, 
    0x50, 0x50, 0x50, 0x50, 0x4F, 0x46, 0x4D, 0x53, 0x4D, 0x4D, 
    0x4D, 0x46, 0x50, 0x42, 0x45, 0x46, 0x4D, 0x4D, 0x4D, 0x4F, 
    0x4D, 0x53, 0x4D, 0x4D, 0x4D, 0x46, 0x50, 0x50, 0x42, 0x45, 
    0x46, 0x4D, 0x4D, 0x4F, 0x53, 0x4D, 0x46, 0x50, 0x50, 0x42, 
    0x45, 0x46, 0x50, 0x4F, 0x4D, 0x53, 0x4D, 0x4D, 0x4D, 0x4D, 
    0x46, 0x50, 0x50, 0x50, 0x42, 0x45, 0x46, 0x4F, 0x46, 0x4D, 
    0x4D, 0x53, 0x4D, 0x4D, 0x46, 0x50, 0x50, 0x50, 0x42, 0x45, 
    0x46, 0x4F
]

map_dict = {
    0x50: '+',
    0x4D: '-',
    0x46: '>',
    0x42: '<',
    0x53: '[',
    0x45: ']',
    0x4F: '.'
}

brainfuck_code = ''.join(map_dict.get(byte, '?') for byte in stream)

def brainfuck_interpreter(code):
    tape = [0] * 30000
    code_ptr = 0
    tape_ptr = 0
    code_length = len(code)
    output = []

    while code_ptr < code_length:
        cmd = code[code_ptr]

        if cmd == '>':
            tape_ptr += 1
        elif cmd == '<':
            tape_ptr -= 1
        elif cmd == '+':
            tape[tape_ptr] = (tape[tape_ptr] + 1) % 256
        elif cmd == '-':
            tape[tape_ptr] = (tape[tape_ptr] - 1) % 256
        elif cmd == '.':
            output.append(chr(tape[tape_ptr]))
        elif cmd == ',':
            # Ignored for this example since there's no input
            pass
        elif cmd == '[':
            if tape[tape_ptr] == 0:
                open_brackets = 1
                while open_brackets != 0:
                    code_ptr += 1
                    if code[code_ptr] == '[':
                        open_brackets += 1
                    elif code[code_ptr] == ']':
                        open_brackets -= 1
        elif cmd == ']':
            if tape[tape_ptr] != 0:
                close_brackets = 1
                while close_brackets != 0:
                    code_ptr -= 1
                    if code[code_ptr] == '[':
                        close_brackets -= 1
                    elif code[code_ptr] == ']':
                        close_brackets += 1

        code_ptr += 1

    return ''.join(output)

flag = brainfuck_interpreter(brainfuck_code)
print("Flag:", flag)
